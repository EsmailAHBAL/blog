/* eslint-disable @typescript-eslint/no-unsafe-assignment */

import Hero from "components/Hero"
import Bar from "components/Bar"
import { useEffect, useState } from "react"
import Posts from "components/Posts"
import Pagination from 'components/Pagination'
import { groq } from "next-sanity"
import { client } from "lib/client"
import { type Post } from "lib/type"
import {type  InferGetServerSidePropsType, type NextPage } from "next"
import RootLayout from "components/layout"
export const metadata = {
  title: 'Web Leaders ',
  description: 'Generated by Next.js',
}
export const getServerSideProps = async () => {
  const qureyCat = groq`
*[_type == 'post' && $cat in categories []-> title] {
 ...,
 categories []->
}
`  
const qurey= groq`
*[_type == "post" ] {
  ...,
  author->,
  categories[]->
} | order(_createdAt desc)
`
const post : Post [] =  await client.fetch(qurey) 
return {
  props : {
    post
  }
}
}
const HomePage : NextPage<InferGetServerSidePropsType<typeof getServerSideProps>>= ({post}) => {
const [cat,setCat ]= useState('')
const [currentPage,setCurrentPage ]= useState(1)

  const  getCategory = (s:string)=>{
      setCat(s)
     
 }

 const getCurrentPage = (n: number)=> {
setCurrentPage(n)
}
const [numberOfPage,setNumberOfPage]=useState<number>(0)
 const [withCat ,setWithCat]= useState([] as Post [])
  useEffect(() => {
   
  const result = post.filter(item=> {
    if(!item.categories) return 
      const i = item.categories.find(c=> c.title ==cat)
     return i
     
     
  })
 setWithCat(result)  
    
  },[cat])
 const [hydrated, setHydrated] = useState(false);
 useEffect(() => {
   // This forces a rerender, so the date is rendered
   // the second time but not the first
   setHydrated(true);
 }, []);
 if (!hydrated) {
   // Returns null on first render, so the client and server match
   return null;
 }
 function postLenght(n:number){
  setNumberOfPage(n)
 }
  return (

          
  <RootLayout>
     <div className="p-2 my-5">
     <Hero />
    
     <Bar getCategory={getCategory} /> 
     </div>
     <Posts cat={cat} page={currentPage} postLenght={postLenght}posts={!cat.length ?post : withCat}/> 
     <div className="flex justify-center items-center w-full">
      <Pagination getCurrentPage={getCurrentPage} nPage={numberOfPage}/>
     </div>
  </RootLayout>
  )
}
export default HomePage